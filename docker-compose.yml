services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./app:/app
    ports:
      - "8003:8003"
    environment:
      - APP_NAME=BoilerPlate
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - shared-network
    

  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: db
    ports:
    - "5440:5432"

    volumes:
      - db_postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - shared-network

  redis:
    image: redis:alpine
    ports:
      - "6380:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - shared-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5673:5672"  # RabbitMQ port for messaging
      - "15675:15672"  # RabbitMQ Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    networks:
      - shared-network
  
  celery:
    build:
      context: .
      dockerfile: Dockerfile.celery
    volumes:
    - ./app:/app
    environment:
      - APP_NAME=BoilerPlateCelery
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - shared-network
    

networks:
  shared-network:
    external: true
    driver: bridge
  
volumes:
  db_postgres_data:
  redis_data:
  rabbitmq_data:
  rabbitmq_logs:
  elasticsearch-data:  
